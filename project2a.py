""" Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ... """

""" By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
find the sum of the even-valued terms. """

#function will generate a fibonacci sequence up to a specified number
def fibonacci_seq(lim):
    """(int) -> lst

    Return the fibonacci sequence up to numbers not exceeding lim.

    >>> fibonacci = fibonacci_seq(4)
    >>> fibonacci
    [0, 1, 1, 2, 3]

    >>> fibby = fibonacci_seq(35)
    >>> fibby
    [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]

    """
    fib_sequence = [0, 1]
    n = 0
    i = 0
    j = 1
    while n < lim:
        n = fib_sequence[i] + fib_sequence[j]
        if n > lim:
            break
        fib_sequence.append(n)
        i += 1
        j += 1
    return fib_sequence

def even_sum(lst):
    """(lst) -> int

    Returns the sum of all even numbers in lst

    >>> sum1 = even_sum([2, 2, 3, 6, 4])
    >>> sum1
    14

    >>> sum2 = even_sum([10, 3, 1, 2])
    >>> sum2
    12
  
    """
    s = 0
    for n in lst:
        if n % 2 == 0:
            s += n
    return s

fib_seq = fibonacci_seq(4000000)
print(even_sum(fib_seq)) 


if __name__ == '__main__':
    import doctest
    doctest.testmod()
